package com.next.model;/*    Glutton .... a Thing that eats and eats*/import java.awt.*;public class Predator extends Thing {    /**     * Config     **/    private double shrinkProbability = 0.1;            // probability of shrinking if nothing eaten this step    private double minRadius = 1.0;                    // minimum size for the Predator    private double amountToShrink = 0.1;                // how much to shrink if shrinking event occurs    /**     * Step metadata     **/    private int eatenThisStep;                // a counter of Things eaten this time step    public Predator(double initX, double initY) {        super(initX, initY);        super.radius = minRadius;        super.drawColor = Color.RED;        this.eatenThisStep = 0;    }    public void step() {        // shrinking if no food found        if (eatenThisStep == 0) {                        // if any food found            if (Math.random() < shrinkProbability) {            // if no food than shrink stochastically                radius += -amountToShrink;            }            if (radius < minRadius) {                radius = minRadius;            } // don't shrink beyond minimum        }        // moving in space        double xInc = (2 * Math.random() - 1) * super.stepSize;    // choose random x-direction step size and direction        double yInc = (2 * Math.random() - 1) * super.stepSize;    // choose random y-direction step size and direction        xPos += xInc;                                // increment x-position        yPos += yInc;                                // increment y-position        // crude boundary constraint        if (((xPos + radius) > maxX) | ((xPos - radius) < 0)) {            xPos += -2 * xInc;    // go other way if past boundary        }        if (((yPos + radius) > maxY) | ((yPos - radius) < 0)) {            yPos += -2 * yInc;    // go other way if past boundary        }        // reset counters        eatenThisStep = 0;    }    public void ateAMutton(Pray eatenM) {        // add volume of mutton to this glutton and change radius accordingly        double muttonVol = Math.PI * eatenM.radius * eatenM.radius;        double newVol = muttonVol + Math.PI * radius * radius;        radius = Math.sqrt(newVol / Math.PI);        eatenM.setIsDead(true);        // set flag so this Mutton will be removed        eatenThisStep++;    }}